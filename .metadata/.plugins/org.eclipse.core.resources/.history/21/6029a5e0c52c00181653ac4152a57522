package com.joedianreid.n26;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.Assert.assertEquals;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.annotation.DirtiesContext.MethodMode;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import com.joedianreid.n26.controller.StatisticsController;
import com.joedianreid.n26.controller.TransactionController;
import com.joedianreid.n26.models.Transaction;
import com.joedianreid.n26.models.TransactionResponse;

@RunWith(SpringRunner.class)
@AutoConfigureMockMvc
@SpringBootTest
@DirtiesContext(methodMode=MethodMode.BEFORE_METHOD)
public class Joediann26ApplicationTests {
	
	Long timeNow = System.currentTimeMillis();
	
	Long minTimeAllowed = timeNow - 60000;
	
	int numberOfTestCalls = 62;
	
	int intervalOfCalls = 100;
	
	@Autowired
	TransactionController transactionController;
	
	@Autowired
	StatisticsController statisticsController;
	
	@Autowired
    private MockMvc mockMvc;

	@Test
	public void contextLoads() {
		assertThat(transactionController).isNotNull();
	}
		
	
	@Test
    public void test_201() throws Exception {      
			
		TransactionResponse response = transactionController.createTransaction(new Transaction(20D, timeNow -1000));			
				
		Thread.sleep(1000);			
		
		assertEquals(response.getResponseCode(), 201);
		
    }

    @Test
    public void test_204_future() throws Exception {      
    	TransactionResponse response = transactionController.createTransaction(new Transaction(20D, timeNow + 40000));			
		
		Thread.sleep(1000);			
		
		assertEquals(response.getResponseCode(), 204);
    }
    
    
    @Test
    public void test_204_past() throws Exception {      
    	TransactionResponse response = transactionController.createTransaction(new Transaction(20D, timeNow - 200000));			
		
		Thread.sleep(1000);			
		
		assertEquals(response.getResponseCode(), 204);
    }

}
