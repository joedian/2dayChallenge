package com.joedianreid.n26.services;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.joedianreid.n26.models.Transaction;


@Service
public class TransactionService {
	
	@Autowired
	private StatisticService statisticService;
	
	private static Long  MAX_MILLISECONDS_HELD = 60000L;
	
	
	/**
	 * Method validates if timeperiod is too old or in the future before adding to queue
	 * 
	 * @param transaction
	 * @return boolean
	 */
	public boolean addTransaction(Transaction transaction){
				
		if(transaction == null || transaction.getTimestamp() == null || 
				isInvalidTimestamp(transaction.getTimestamp())){
			return false;
		}
		
		return statisticService.addToQue(transaction);
	}
	
	/**
	 * Utility method to check if the new timestamp is less than 60 seconds old, or in the future
	 * . In both cases is invalid, otherwise is valid.
	 * 
	 * @param transactionTime
	 * @return
	 */
	private boolean isInvalidTimestamp(Long transactionTime){
		Long currentTimeInMilliseconds = System.currentTimeMillis();
		Long oldestTimeAccepted = currentTimeInMilliseconds - MAX_MILLISECONDS_HELD;
		
		if( transactionTime < oldestTimeAccepted || transactionTime > currentTimeInMilliseconds)
			return true;
		
		return false;
	}

}
